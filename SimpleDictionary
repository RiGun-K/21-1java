import javax.swing.*;

import java.awt.event.*;
import java.util.*;
import java.awt.*;

import java.io.*;		// 입력받은 단어를 텍스트로 저장

public class SimpleDictionary extends JPanel implements ActionListener {				// 패널 상속 , 이벤트 리스너 
	/*
	 * 단어 입력 받을수 있는 JTextField
	 * 검색버튼 , 추가버튼 , 단어장 구현을 위한 자료구조로 Map 객체
	 */
	private JTextField inputField = new JTextField(30); 	// 멤버변수 생성 , 30칼럼 
	private JButton searchBtn = new JButton("검색");
	private JButton addBtn = new JButton("추가");

	// Map 객체를 단어장 구현 사용할꺼다.
	// <Key, value> 쌍으로 저장. key 는 한글단어 , value는 대응되는 영어단어.
	private Map<String, String> dict = new HashMap<>();
	private static final String DIC_FILE_NAME = "dict.props";
	
	public SimpleDictionary() {								// 생성자 생성
		// Panel 의 기본 레이아웃 : FlowLayout	 ( 물 흐르는 대로 갖다 붙이는것 )
		this.add(inputField);
		this.add(searchBtn);
		this.add(addBtn);
		
		// ssearchBtn , addBtn 에 클릭 이벤트가 발생했을 때 처리할 리스너를 지정하자 !!!
		searchBtn.addActionListener(this);					// 객체에 이벤트 처리 
		addBtn.addActionListener(this);
		
		
		this.setPreferredSize(new Dimension(600, 50));
		
		// 파일에 key=value 형태로 저장된 엔트리들을 읽어서 , dict를 구성하자.
	
		
		buildDictionaryFromFile();
	
	
	}
	
	private void buildDictionaryFromFile() {
		// Properts 일종의 Map 인데
		// Key , value 의 타입이 각각 String , String 으로 고정된 일종의 Map이다.
		Properties props = new Properties();
		
		// 파일에서 읽어서  props 객체의 <key , value> 쌍을 구성할 수 있다.
		
		try (FileReader fReader = new FileReader(DIC_FILE_NAME)) {
			props.load(fReader);
		} catch(Exception e) {
			System.out.println(e.getMessage());
		}
		
		Set<Object> set = props.keySet();
		for (Object obj : set) {
			dict.put((String)obj, (String)props.get(obj));
		}
	}
	
	
	
	

	@Override
	public void actionPerformed(ActionEvent e) {
		String key = inputField.getText();
		if (key.trim().length() == 0) 		// key가 공백이면(입력하지 않으면) return 하자 = 입력되지 않게 (무시) 
			return;					
		// TODO Auto-generated method stub
		if (e.getSource() == searchBtn) {	// 이벤트가 발생한 객체를 return 해준다.
			/*
			 * 입력된 단어를 추출 
			 * 그 단어를 Key 값으로 가지는 대응되는 맵 엔트리가 있는지 검사  => dict.get(단어);  
			 * 그 단어 대응되는 값이 있으면 JOptionPane.showMessageDialong() 메서드 호출하여 대응되는 값을 보여준다  
			 * 대응되는 값이 없으면 = (Null이면) JOptionPane.showMessageDialog() 메서드를 호출하여  '단어를 찾을 수 없습니다'라고 출력해준다.
			 * inputField를 빈 문자열로 설정...
			 */	 
			System.out.println("[" + key + "]");
			String value = dict.get(key);
			if (value != null) {	// 대응되는 단어가 있는 경우
				JOptionPane.showMessageDialog(this, value, key, JOptionPane.INFORMATION_MESSAGE);     // this = SimpleDictionary 객체
			} else {				// 대응되는 단어가 없는 경우
				JOptionPane.showMessageDialog(this, "단어를 찾을 수 없습니다", key, JOptionPane.ERROR_MESSAGE);
			}
			
		} else if (e.getSource() == addBtn) {
			/*
			 * 입력된 단어를 추출
			 * String value = JOptionPane.showInputDialog() 메서드를 호출하여 추가할 영단어를 입력 받는다.
			 * dict.put(입력필드에 입력된 단어 , inputDialog에 입력된 단어);		// 입력된 단어를 저장
			 * inputField를 빈 문자열로 설정 ↓
			 */
			String value = JOptionPane.showInputDialog(this, key + "에 대응되는 영단어를 입력하세요.");   		// 문자열 변수로 입력된 단어를 받는다.
			
			if(value.trim().length() == 0) return;
			dict.put(key, value);
			
			addWordToFile(key, value);
			// 파일에도 key=value 의 쌍으로 기록해놓자..
			JOptionPane.showMessageDialog(this, "["+value+"]영단어가 추가되었습니다.", key, JOptionPane.INFORMATION_MESSAGE);  
			
		}
	
		inputField.setText("");
		
	}
	
	// dict.props 에 저장됨
	private void addWordToFile(String key, String value) {
		try(FileWriter fWriter = new FileWriter(DIC_FILE_NAME, true)) {
			fWriter.write(key+"="+value+"\n");		// \n = 줄 바꿈   ex ) 학교=school사과=apple -> 학교=school 사과=apple
		} catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	public static void main(String[] args) {
		// 프레임이 있어야 실행됨
		JFrame frame = new JFrame();
		SimpleDictionary dictPanel = new SimpleDictionary(); 	// SimpleDictionary 객체 생성
		frame.add(dictPanel);
		frame.setTitle("My Korean-English Dictionary");
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		frame.pack();
		frame.setResizable(false);
		
		
	}





}
